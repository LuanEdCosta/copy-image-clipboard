{"version":3,"sources":["styles/Theme.ts","styles/GlobalStyles.ts","components/Buttons/index.ts","components/Spinners/index.ts","assets/FirstImage.jpg","assets/SecondImage.png","pages/Home/styles.ts","pages/Home/index.tsx","locales/EN/index.ts","locales/index.ts","pages/App/index.tsx","index.tsx"],"names":["LIGHT_THEME","id","background","snow","primaryText","secondaryText","border","accent","accentLight","GlobalStyles","createGlobalStyle","theme","Button","styled","button","attrs","props","type","disabled","css","rotate360","keyframes","Spinner","div","duration","color","ringColor","size","thickness","WhiteSpinner","Container","Content","Item","Image","img","CopyButton","Paste","PasteText","PasteImage","Home","t","useTranslation","useState","copiedImageURL","setCopiedImageURL","isCopyingFirstImage","setIsCopyingFirstImage","isCopyingSecondImage","setIsCopyingSecondImage","firstImageRef","useRef","secondImageRef","handleCopyFirstImage","a","imageSrc","current","src","copyImageToClipboard","message","alert","handleCopySecondImage","handleTransformDataTransferIntoURL","dataTransfer","blob","items","getAsFile","URL","createObjectURL","useEffect","handlePasteOnDocument","e","clipboardData","url","document","addEventListener","removeEventListener","ref","FirstImage","draggable","alt","onClick","SecondImage","onPaste","event","resource","i18next","use","initReactI18next","init","resources","en","EN","fallbackLng","lng","defaultNS","debug","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7cbce4e7.chunk.js","sourcesContent":["export interface AppTheme {\r\n  id: string\r\n  background: string\r\n  snow: string\r\n  primaryText: string\r\n  secondaryText: string\r\n  border: string\r\n  accent: string\r\n  accentLight: string\r\n}\r\n\r\nexport const LIGHT_THEME: AppTheme = {\r\n  id: 'light',\r\n  background: '#ffffff',\r\n  snow: '#f2f2f2',\r\n  primaryText: '#464646',\r\n  secondaryText: '#737373',\r\n  border: '#cccccc',\r\n  accent: '#005180',\r\n  accentLight: '#006199',\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  *, *::before, *::after {\r\n    font-family: 'Open Sans', sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html {\r\n    font-size: 62.5%;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  html, body, #root {\r\n    height: 100%;\r\n    overflow-x: hidden;\r\n\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n\r\n    background: ${({ theme }) => theme.background};\r\n    color: ${({ theme }) => theme.primaryText};\r\n  }\r\n\r\n  body, #root {\r\n    font-size: 1.4rem;\r\n  }\r\n\r\n  button {\r\n    font-size: 1.4rem;\r\n    color: ${({ theme }) => theme.primaryText};\r\n  }\r\n\r\n  svg {\r\n    overflow: initial;\r\n  }\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Button = styled.button.attrs((props) => ({\r\n  type: props.type || 'button',\r\n}))`\r\n  min-height: 5rem;\r\n\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 1rem;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  font-weight: bold;\r\n  font-size: 1.6rem;\r\n  color: white;\r\n\r\n  padding: 0.8rem 2.4rem;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n  transition: all 0.2s ease-in-out;\r\n\r\n  background: ${(props) => props.theme.accent};\r\n\r\n  ${(props) => {\r\n    if (props.disabled) {\r\n      return css`\r\n        pointer-events: none;\r\n        opacity: 0.6;\r\n      `\r\n    }\r\n  }}\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: ${(props) => props.theme.accentLight};\r\n  }\r\n\r\n  span {\r\n    margin-right: 1.6rem;\r\n  }\r\n`\r\n","import styled, { keyframes, css } from 'styled-components'\r\n\r\nconst rotate360 = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`\r\n\r\nexport interface SpinnerProps {\r\n  duration?: number\r\n  color?: string\r\n  ringColor?: string\r\n  background?: string\r\n  size?: string\r\n  thickness?: number\r\n}\r\n\r\nexport const Spinner = styled.div<SpinnerProps>`\r\n  ${(props) => {\r\n    const {\r\n      duration = 0.5,\r\n      color = props.theme.primaryText,\r\n      ringColor = 'rgba(0,0,0,0.1)',\r\n      background = 'transparent',\r\n      size = '1em',\r\n      thickness = 2,\r\n    } = props\r\n    return css`\r\n      animation: ${rotate360} ${duration}s linear infinite;\r\n      transform: translateZ(0);\r\n      border-top: ${thickness}px solid ${ringColor};\r\n      border-right: ${thickness}px solid ${ringColor};\r\n      border-bottom: ${thickness}px solid ${ringColor};\r\n      border-left: ${thickness}px solid ${color};\r\n      background: ${background};\r\n      width: ${size};\r\n      height: ${size};\r\n      border-radius: 50%;\r\n    `\r\n  }}\r\n`\r\n\r\nexport const WhiteSpinner = styled(Spinner).attrs({\r\n  color: 'white',\r\n  ringColor: 'rgba(255, 255, 255, 0.1)',\r\n})``\r\n","export default __webpack_public_path__ + \"static/media/FirstImage.9a7a581a.jpg\";","export default __webpack_public_path__ + \"static/media/SecondImage.69834c6f.png\";","import styled from 'styled-components'\r\n\r\nimport { Button } from 'src/components'\r\n\r\nexport const Container = styled.div`\r\n  min-height: 100%;\r\n  padding: 2.4rem 4.8rem;\r\n\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: stretch;\r\n  justify-content: center;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    flex-direction: column;\r\n    padding: 1.6rem;\r\n  }\r\n`\r\n\r\nexport const Content = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const Item = styled.div`\r\n  margin: 1.6rem;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nexport const Image = styled.img`\r\n  height: 25rem;\r\n  width: 25rem;\r\n\r\n  border-radius: 1rem;\r\n\r\n  margin-bottom: 0.8rem;\r\n\r\n  @media only screen and (max-width: 1280px) {\r\n    height: 20rem;\r\n    width: 20rem;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    height: 15rem;\r\n    width: 15rem;\r\n  }\r\n`\r\n\r\nexport const CopyButton = styled(Button)`\r\n  width: 100%;\r\n`\r\n\r\nexport const Paste = styled.div`\r\n  margin: 1.6rem;\r\n  padding: 1.6rem;\r\n\r\n  border: 0.5rem dotted ${(props) => props.theme.border};\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1;\r\n\r\n  transition: color 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    color: ${(props) => props.theme.accent};\r\n  }\r\n`\r\n\r\nexport const PasteText = styled.div`\r\n  font-size: 1.8rem;\r\n  color: ${(props) => props.theme.secondaryText};\r\n`\r\n\r\nexport const PasteImage = styled.img`\r\n  max-width: 100%;\r\n  border-radius: 1rem;\r\n`\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { FiCopy } from 'react-icons/fi'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { copyImageToClipboard } from 'copy-image-clipboard'\r\n\r\nimport { WhiteSpinner } from 'src/components'\r\nimport { FirstImage, SecondImage } from 'src/assets'\r\n\r\nimport {\r\n  Container,\r\n  Content,\r\n  Item,\r\n  Image,\r\n  CopyButton,\r\n  Paste,\r\n  PasteText,\r\n  PasteImage,\r\n} from './styles'\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation('Home')\r\n\r\n  const [copiedImageURL, setCopiedImageURL] = useState('')\r\n  const [isCopyingFirstImage, setIsCopyingFirstImage] = useState(false)\r\n  const [isCopyingSecondImage, setIsCopyingSecondImage] = useState(false)\r\n\r\n  const firstImageRef = useRef<HTMLImageElement | null>(null)\r\n  const secondImageRef = useRef<HTMLImageElement | null>(null)\r\n\r\n  const handleCopyFirstImage = async () => {\r\n    try {\r\n      setIsCopyingFirstImage(true)\r\n      const imageSrc = firstImageRef.current?.src\r\n      if (imageSrc) await copyImageToClipboard(imageSrc)\r\n    } catch (e: any) {\r\n      if (e?.message) alert(e.message)\r\n    } finally {\r\n      setIsCopyingFirstImage(false)\r\n    }\r\n  }\r\n\r\n  const handleCopySecondImage = async () => {\r\n    try {\r\n      setIsCopyingSecondImage(true)\r\n      const imageSrc = secondImageRef.current?.src\r\n      if (imageSrc) await copyImageToClipboard(imageSrc)\r\n    } catch (e: any) {\r\n      if (e?.message) alert(e.message)\r\n    } finally {\r\n      setIsCopyingSecondImage(false)\r\n    }\r\n  }\r\n\r\n  const handleTransformDataTransferIntoURL = (\r\n    dataTransfer: DataTransfer,\r\n  ): string => {\r\n    const [firstItem] = dataTransfer.items\r\n    const blob = firstItem.getAsFile()\r\n    return URL.createObjectURL(blob)\r\n  }\r\n\r\n  const handlePaste = (e: unknown) => {\r\n    const event = e as ClipboardEvent\r\n    if (event.clipboardData) {\r\n      const url = handleTransformDataTransferIntoURL(event.clipboardData)\r\n      setCopiedImageURL(url)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handlePasteOnDocument = (e: ClipboardEvent) => {\r\n      if (e.clipboardData) {\r\n        const url = handleTransformDataTransferIntoURL(e.clipboardData)\r\n        setCopiedImageURL(url)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('paste', handlePasteOnDocument)\r\n\r\n    return () => {\r\n      document.removeEventListener('paste', handlePasteOnDocument)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <Item>\r\n          <Image\r\n            ref={firstImageRef}\r\n            src={FirstImage}\r\n            draggable={false}\r\n            alt={t('firstImageAlt')}\r\n          />\r\n\r\n          <CopyButton onClick={handleCopyFirstImage}>\r\n            <span>{t('copyJpgImage')}</span>\r\n            {isCopyingFirstImage ? <WhiteSpinner /> : <FiCopy />}\r\n          </CopyButton>\r\n        </Item>\r\n\r\n        <Item>\r\n          <Image\r\n            ref={secondImageRef}\r\n            src={SecondImage}\r\n            draggable={false}\r\n            alt={t('secondImageAlt')}\r\n          />\r\n\r\n          <CopyButton onClick={handleCopySecondImage}>\r\n            <span>{t('copyPngImage')}</span>\r\n            {isCopyingSecondImage ? <WhiteSpinner /> : <FiCopy />}\r\n          </CopyButton>\r\n        </Item>\r\n      </Content>\r\n\r\n      <Paste onPaste={handlePaste}>\r\n        {copiedImageURL ? (\r\n          <PasteImage src={copiedImageURL} alt={t('pasteImageAlt')} />\r\n        ) : (\r\n          <PasteText>{t('pasteText')}</PasteText>\r\n        )}\r\n      </Paste>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import Home from './Home.json'\r\n\r\nconst resource = {\r\n  Home,\r\n}\r\n\r\nexport default resource\r\n","import i18next from 'i18next'\r\nimport { initReactI18next } from 'react-i18next'\r\n\r\nimport EN from './EN'\r\n\r\ni18next.use(initReactI18next).init({\r\n  resources: { en: EN },\r\n  fallbackLng: 'en',\r\n  lng: 'en',\r\n  defaultNS: 'Glossary',\r\n  debug: false,\r\n})\r\n\r\nexport default i18next\r\n","import { ThemeProvider } from 'styled-components'\r\n\r\nimport { GlobalStyles, LIGHT_THEME } from 'src/styles'\r\nimport Home from 'src/pages/Home'\r\n\r\nimport '@fontsource/open-sans'\r\nimport 'src/locales'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ThemeProvider theme={LIGHT_THEME}>\r\n      <GlobalStyles />\r\n      <Home />\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { StrictMode } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './pages/App'\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}